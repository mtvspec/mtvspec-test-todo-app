{"version":3,"sources":["./src/app/state/task/task.selectors.ts","./src/app/modules/auth/auth.module.ts","./src/app/state/auth/auth.reducer.ts","./src/app/shared/services/snack-bar.service.ts","./src/app/services/task.datasource.ts","./src/environments/environment.ts","./src/app/state/task/task.actions.ts","./src/app/components/task/task.component.ts","./src/app/components/task/task.component.html","./src/app/state/auth/auth.actions.ts","./src/app/modules/task/task.module.ts","./src/app/reducers/index.ts","./src/app/components/main/main.component.ts","./src/app/components/main/main.component.html","./src/app/state/auth/auth.state.ts","./src/app/config/index.ts","./src/app/shared/constants/index.ts","./src/app/state/task/task.state.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/state/auth/auth.selectors.ts","./src/app/guards/auth.guard.ts","./src/app/shared/modules/material/material.module.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/state/auth/index.ts","./src/app/app.module.ts","./src/app/services/task.service.ts","./src/app/state/task/index.ts","./src/app/components/new-task/new-task.component.ts","./src/app/components/new-task/new-task.component.html","./src/app/state/auth/auth.effects.ts","./src/app/services/auth.service.ts","./src/app/state/task/task.effects.ts","./src/app/services/config.service.ts","./src/app/models/task.model.ts","./src/app/state/task/task.reducer.ts","./src/app/app-routing.module.ts","./src/app/components/task-list/task-list.component.ts","./src/app/components/task-list/task-list.component.html","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { createSelector, createFeatureSelector } from '@ngrx/store';\n\nimport { TaskState } from './task.state';\n\nexport const getTaskState = createFeatureSelector<TaskState>('tasks');\n\nexport const getTasks = createSelector(\n  getTaskState,\n  state => state.tasks,\n);\n\nexport const getIsLoading = createSelector(\n  getTaskState,\n  state => state.isLoading,\n);\n\nexport const getError = createSelector(\n  getTaskState,\n  state => state.error,\n);\n\nexport const createTaskOperationInFly = createSelector(\n  getTaskState,\n  state => state.createTask.operationInFly,\n);\n\nexport const createTaskOperationPayload = createSelector(\n  getTaskState,\n  state => state.createTask.payload,\n);\n\nexport const currentTask = createSelector(\n  getTaskState,\n  state => state.currentTask,\n);\n\nexport const editTaskOperationInFly = createSelector(\n  getTaskState,\n  state => state.editTask.operationInFly,\n);\n\nexport const editTaskOperationPayload = createSelector(\n  getTaskState,\n  state => state.editTask.payload,\n);\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\n\nimport * as fromAuth from '../../state/auth';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('auth', fromAuth.authReducer),\n  ]\n})\nexport class AuthModule { }\n","import { authInitialState, AuthState } from './auth.state';\nimport { AuthActions, AuthActionTypes } from './auth.actions';\n\nexport function authReducer(state: AuthState = authInitialState, action: AuthActions): AuthState {\n  switch (action.type) {\n    case AuthActionTypes.Login:\n      return Object.assign({}, state, {\n        loginInFly: true,\n      });\n    case AuthActionTypes.LoginSuccess:\n      return Object.assign({}, state, {\n        loginInFly: false,\n        isAuthenticated: true,\n        token: action.payload.message.token,\n      });\n    case AuthActionTypes.isAuthenticated:\n      return Object.assign({}, state, {\n        isAuthenticated: action.payload.isAuthenticated,\n        token: action.payload.token,\n      });\n    case AuthActionTypes.LoginError:\n      return Object.assign({}, state, {\n        loginInFly: false,\n        isAuthenticated: true,\n        message: action.payload,\n      });\n    case AuthActionTypes.Logout:\n      localStorage.clear();\n      return Object.assign({}, state, {\n        isAuthenticated: false,\n        token: null,\n      });\n    default:\n      return state;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackBarService {\n\n  constructor(\n    private snackBar: MatSnackBar,\n  ) { }\n\n  public showMessage(message: string, duration: number = 3000): void {\n    this.snackBar.open(message, '', {\n      verticalPosition: 'top',\n      horizontalPosition: 'right',\n      duration,\n    });\n  }\n\n  public showErrorMessage(message: string, duration: number = 9000): void {\n    this.snackBar.open(message, 'Закрыть', {\n      verticalPosition: 'top',\n      horizontalPosition: 'center',\n      duration,\n    });\n  }\n\n}\n","import { DataSource } from '@angular/cdk/collections';\nimport { Store } from '@ngrx/store';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { Task } from '../models/task.model';\n\nimport * as fromTask from '../state/task';\nimport { tap } from 'rxjs/operators';\n\nexport class TaskDatasource implements DataSource<Task> {\n\n  private taskSubject = new BehaviorSubject<Task[]>([]);\n\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n\n  loading$ = this.loadingSubject.asObservable();\n  taskListLoading$: Subscription | null = null;\n  taskList$: Subscription | null = null;\n\n  constructor(\n    private readonly store: Store,\n  ) {\n\n    this.taskListLoading$ = this.store.select(fromTask.getIsLoading)\n      .pipe(tap(loading => this.loadingSubject.next(loading)))\n      .subscribe();\n\n    this.taskList$ = this.store.select(fromTask.getTasks)\n      .pipe(tap(taskList => {\n        this.loadingSubject.next(false);\n        this.loadTaskList(taskList.nodes);\n      })).subscribe();\n  }\n\n  loadTaskList(data: Task[]): void {\n    this.taskSubject.next(data);\n  }\n\n  connect(): Observable<Task[]> {\n    return this.taskSubject.asObservable();\n  }\n\n  disconnect(): void {\n    this.taskSubject.complete();\n    this.loadingSubject.complete();\n  }\n\n}\n","export const environment = {\n  production: false,\n  baseUrl: 'https://uxcandy.com/~shapoval/test-task-backend/v2',\n};\n","import { Action } from '@ngrx/store';\nimport { EditTaskPayload, NewTaskPayload, Task } from 'src/app/models/task.model';\nimport { CreateTaskErrorPayload, CreateTaskSuccessPayload, EditTaskErrorPayload, EditTaskSuccessPayload, GetAllTasksResponse } from 'src/app/services/task.service';\n\nexport enum TaskActionTypes {\n\n  GET_ALL_TASKS = '[Task] Get All Tasks',\n  GET_ALL_TASKS_SUCCESS = '[Task] Get All Tasks Success',\n  GET_ALL_TASKS_ERROR = '[Task] Get All Tasks Error',\n\n  CREATE_TASK = '[Task] Create Task',\n  CREATE_TASK_SUCCESS = '[Task] Create Task Success',\n  CREATE_TASK_ERROR = '[Task] Create Task Error',\n  CREATE_TASK_OPERATION = '[Task] Create Task Operation',\n\n  SET_CURRENT_TASK = '[List] Set Current Task',\n\n  EDIT_TASK = '[Task] Edit Task',\n  EDIT_TASK_SUCCESS = '[Task] Edit Task Success',\n  EDIT_TASK_ERROR = '[Task] Edit Task Error',\n  EDIT_TASK_OPERATION = '[Task] Edit Task Operation',\n\n}\n\nexport class GetAllTasks implements Action {\n  readonly type = TaskActionTypes.GET_ALL_TASKS;\n  constructor(public payload?: any) { }\n}\n\nexport class GetAllTasksSuccess implements Action {\n  readonly type = TaskActionTypes.GET_ALL_TASKS_SUCCESS;\n  constructor(public payload: GetAllTasksResponse) { }\n}\n\nexport class GetAllTasksError implements Action {\n  readonly type = TaskActionTypes.GET_ALL_TASKS_ERROR;\n  constructor(public payload: { message: string }) { }\n}\n\nexport class CreateTask implements Action {\n  readonly type = TaskActionTypes.CREATE_TASK;\n  constructor(public payload: NewTaskPayload) { }\n}\n\nexport class CreateTaskSuccess implements Action {\n  readonly type = TaskActionTypes.CREATE_TASK_SUCCESS;\n  constructor(public payload: CreateTaskSuccessPayload) { }\n}\n\nexport class CreateTaskError implements Action {\n  readonly type = TaskActionTypes.CREATE_TASK_ERROR;\n  constructor(public payload: CreateTaskErrorPayload) { }\n}\n\nexport class CreateTaskOperation implements Action {\n  readonly type = TaskActionTypes.CREATE_TASK_OPERATION;\n  constructor(public payload: boolean) { }\n}\n\nexport class SetCurrentTask implements Action {\n  readonly type = TaskActionTypes.SET_CURRENT_TASK;\n  constructor(public payload: Task | null) { }\n}\n\nexport class EditTask implements Action {\n  readonly type = TaskActionTypes.EDIT_TASK;\n  constructor(public payload: EditTaskPayload) { }\n}\n\nexport class EditTaskSuccess implements Action {\n  readonly type = TaskActionTypes.EDIT_TASK_SUCCESS;\n  constructor(public payload: EditTaskSuccessPayload) { }\n}\n\nexport class EditTaskError implements Action {\n  readonly type = TaskActionTypes.EDIT_TASK_ERROR;\n  constructor(public payload: EditTaskErrorPayload) { }\n}\n\nexport class EditTaskOperation implements Action {\n  readonly type = TaskActionTypes.EDIT_TASK_OPERATION;\n  constructor(public payload: boolean) { }\n}\n\nexport type TaskActions =\n  | GetAllTasks\n  | GetAllTasksSuccess\n  | GetAllTasksError\n  | CreateTask\n  | CreateTaskSuccess\n  | CreateTaskError\n  | CreateTaskOperation\n  | SetCurrentTask\n  | EditTask\n  | EditTaskSuccess\n  | EditTaskError\n  | EditTaskOperation;\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Task, TaskStatus } from 'src/app/models/task.model';\n\nimport { TaskState } from 'src/app/state/task';\n\n\nimport * as fromAuth from '../../state/auth';\n\nimport * as fromTask from '../../state/task';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.scss']\n})\nexport class TaskComponent implements OnInit, OnDestroy {\n  operationInFly$: Observable<boolean | null> | null = null;\n  token$: Subscription | null = null;\n  task$: Subscription | null = null;\n  task: Task | null = null;\n  formModel: { [key in keyof { text: string; status: TaskStatus }]: FormControl } = {\n    text: new FormControl(null, [\n      Validators.required\n    ]),\n    status: new FormControl(null, [\n      Validators.required,\n    ]),\n  };\n  form: FormGroup = new FormGroup(this.formModel);\n  completed: FormControl = new FormControl();\n  edited: FormControl = new FormControl();\n  edit$: Subscription | null = null;\n  constructor(\n    private store: Store<TaskState>,\n    private router: Router,\n  ) { }\n\n  ngOnInit(): void {\n    this.operationInFly$ = this.store.select(fromTask.editTaskOperationInFly);\n    /*\n    Так как API для получения задачи по ее id нет получаю задачу через сервис\n    (но если пользователь отправит ссылку на задачу другому пользователю задача не откроется)\n    */\n    this.task$ = this.store.select(fromTask.currentTask)\n      .pipe(\n        tap(async task => {\n          if (task) {\n            this.task = task;\n            this.form.get('text')?.setValue(task?.text);\n            this.form.get('status')?.setValue(task?.status);\n            this.completed.setValue(task.completed);\n            this.edited.disable()\n            this.edited.setValue(task.edited);\n          } else {\n            await this.router.navigate(['']);\n          }\n        })\n      )\n      .subscribe();\n\n\n    this.edit$ = this.store.select(fromTask.editTaskOperationPayload)\n      .pipe(\n        tap(async res => {\n          if (res) {\n            this.store.dispatch(new fromTask.SetCurrentTask(null));\n            this.store.dispatch(new fromTask.EditTaskOperation(false));\n            await this.router.navigate(['../']);\n          }\n        }\n        ))\n      .subscribe();\n\n  }\n\n  save(): void {\n\n    this.token$ = this.store.select(fromAuth.getToken)\n      .pipe(tap(token => {\n        if (token && this.form.valid && this.task) {\n          /*\n            Определение статуса задачи исходя из состояния задачи\n            */\n\n          let status: TaskStatus = this.task.status;\n\n          const completed = this.completed.value;\n          const edited = this.task.text !== this.form.get('text')?.value\n\n          if (!completed && !edited) {\n            status = TaskStatus.NotCompleted;\n          } else if (completed && !edited) {\n            status = TaskStatus.Completed;\n          } else if (completed && edited) {\n            status = TaskStatus.CompletedAndEditedByAdmin;\n          } else if (!completed && edited) {\n            status = TaskStatus.NotCompletedAndEditedByAdmin;\n          }\n\n          this.store.dispatch(new fromTask.EditTask({\n            id: this.task.id,\n            data: {\n              text: this.form.value?.text,\n              status,\n            },\n            token,\n          }));\n        }\n      }))\n      .subscribe();\n\n\n  }\n\n  ngOnDestroy(): void {\n    if (this.edit$) {\n      this.edit$.unsubscribe();\n    }\n  }\n\n}\n","<ng-container *ngIf=\"task\">\n  <mat-toolbar>\n    <a mat-button routerLink=\"../\">Назад</a>\n    <span> Редактирование задачи </span>\n  </mat-toolbar>\n  <form [formGroup]=\"form\" (ngSubmit)=\"save()\">\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Текст</mat-label>\n      <textarea\n        matInput\n        name=\"text\"\n        id=\"text\"\n        rows=\"10\"\n        [formControl]=\"formModel.text\"\n        required\n      ></textarea>\n      <mat-error *ngIf=\"formModel.text?.errors?.required\"\n        >Текст задачи обязателен для заполнения</mat-error\n      >\n    </mat-form-field>\n\n    <div class=\"form-control checkbox\">\n      <label for=\"completed\">Выполнена</label>\n      <mat-checkbox\n        id=\"completed\"\n        [checked]=\"task.completed\"\n        [formControl]=\"completed\"\n      ></mat-checkbox>\n    </div>\n\n    <div class=\"form-control checkbox\">\n      <label for=\"edited\">Отредактирована</label>\n      <mat-checkbox\n        id=\"edited\"\n        [checked]=\"task.edited\"\n        [formControl]=\"edited\"\n      ></mat-checkbox>\n    </div>\n\n    <button\n      [disabled]=\"operationInFly$ | async\"\n      mat-raised-button\n      color=\"primary\"\n      (click)=\"save()\"\n      type=\"button\"\n    >\n      Сохранить\n    </button>\n  </form>\n</ng-container>\n","import { Action } from '@ngrx/store';\n\nexport enum AuthActionTypes {\n  Login = '[Auth] Login',\n  LoginSuccess = '[Auth] Login Success',\n  LoginError = '[Auth] Login Error',\n  isAuthenticated = '[Auth] Is authenticated',\n  Logout = '[Auth] Logout',\n}\n\nexport class Login implements Action {\n  public readonly type = AuthActionTypes.Login;\n  constructor(public payload: { username: string; password: string; }) {}\n}\n\nexport class LoginSuccess implements Action {\n  readonly type = AuthActionTypes.LoginSuccess;\n  constructor(public payload: any) {}\n}\n\nexport class LoginError implements Action {\n  readonly type = AuthActionTypes.LoginError;\n  constructor(public payload: any) {}\n}\n\nexport class IsAuthenticated implements Action {\n  readonly type = AuthActionTypes.isAuthenticated;\n  constructor(public payload: { isAuthenticated: boolean; token: string | null; }) {}\n}\n\nexport class Logout implements Action {\n  public readonly type = AuthActionTypes.Logout;\n}\n\nexport type AuthActions =\n  | Login\n  | LoginSuccess\n  | LoginError\n  | IsAuthenticated\n  | Logout;\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\n\nimport * as fromTask from '../../state/task';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('tasks', fromTask.taskReducer),\n  ]\n})\nexport class TaskModule { }\n","import {\n  ActionReducerMap,\n  MetaReducer,\n  ActionReducer,\n  Action\n} from '@ngrx/store';\n\nimport * as fromAuth from '../state/auth';\n\nimport * as fromTask from '../state/task';\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AppState {}\n\nexport const reducers: ActionReducerMap<AppState> = {\n  tasks: fromTask.taskReducer,\n  auth: fromAuth.authReducer,\n};\n\nexport function clearState(reducer: ActionReducer<AppState>): ActionReducer<AppState> {\n  return (state: AppState | undefined, action: Action): AppState => {\n    return reducer(state, action);\n  };\n}\n\n\nexport const metaReducers: MetaReducer<AppState>[] = [clearState];\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport * as fromAuth from '../../state/auth';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit, OnDestroy {\n  isAuthenticated$: Observable<boolean> | null = null;\n  constructor(\n    private readonly store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.isAuthenticated$ = this.store.select(fromAuth.getIsAuthenticated);\n  }\n\n  logout(): void {\n    this.store.dispatch(new fromAuth.Logout());\n  }\n\n  ngOnDestroy(): void {}\n\n}\n","<mat-toolbar>\n  <div class=\"spacer\"></div>\n  <button mat-button routerLink=\"login\" *ngIf=\"(isAuthenticated$ | async) === false\">Войти</button>\n  <button mat-button (click)=\"logout()\" *ngIf=\"isAuthenticated$ | async\">Выйти</button>\n</mat-toolbar>\n<router-outlet></router-outlet>\n","\nexport interface AuthState {\n  loginInFly: boolean;\n  isAuthenticated: boolean;\n  token: string | null;\n}\n\nexport const authInitialState: AuthState = {\n  loginInFly: false,\n  isAuthenticated: false,\n  token: null,\n};\n","export default {\n  developer: 'mtvspec',\n};\n","export enum OperationStatus {\n  Ok = 'ok',\n  Error = 'error',\n}\n\nexport type Operation = {\n  status: OperationStatus\n};\n\nexport default {\n  OperationStatus,\n};\n","import { Task } from 'src/app/models/task.model';\nimport { GetAllTasksResponse } from 'src/app/services/task.service';\n\nexport interface TaskState {\n  tasks: GetAllTasksResponse;\n  isLoading: boolean;\n  error: any;\n  createTask: {\n    operationInFly: boolean | null;\n    payload: boolean | null;\n  };\n  currentTask: Task | null;\n  editTask: {\n    operationInFly: boolean | null;\n    payload: boolean | null;\n  };\n}\n\nexport const taskInitialState: TaskState = {\n  tasks: {\n    totalCount: 0,\n    nodes: [],\n  },\n  isLoading: false,\n  error: null,\n  createTask: {\n    operationInFly: null,\n    payload: null,\n  },\n  currentTask: null,\n  editTask: {\n    operationInFly: null,\n    payload: null,\n  }\n};\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'frontend';\n}\n","<router-outlet></router-outlet>\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { AuthState } from './auth.state';\n\nexport const getAuthState = createFeatureSelector<AuthState>('auth');\n\nexport const getLoginInFly = createSelector(\n  getAuthState,\n  state => state.loginInFly,\n);\n\nexport const getIsAuthenticated = createSelector(\n  getAuthState,\n  state => state.isAuthenticated,\n);\n\nexport const getToken = createSelector(\n  getAuthState,\n  state => state.token,\n);\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\nimport { AuthService } from '../services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(\n    private readonly authService: AuthService,\n    private readonly router: Router,\n  ) { }\n\n  canActivate(): boolean {\n    const isAuthenticated = !!this.authService.getToken();\n    if (!isAuthenticated) {\n      this.router.navigate(['login']);\n    }\n    return isAuthenticated;\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\n@NgModule({\n  imports: [\n    MatButtonModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatToolbarModule,\n    MatSnackBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatTableModule,\n    MatSortModule,\n    MatPaginatorModule,\n    MatToolbarModule,\n    MatSnackBarModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n  ]\n})\nexport class MaterialModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport {Store} from '@ngrx/store';\nimport { Observable } from 'rxjs';\n\nimport * as fromAuth from '../../state/auth';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginInFly$: Observable<boolean> | null = null;\n  formModel: {[key in keyof Login]: FormControl} = {\n    username: new FormControl(null, [\n      Validators.required\n    ]),\n    password: new FormControl(null, [\n      Validators.required,\n    ]),\n  };\n\n  form: FormGroup = new FormGroup(this.formModel);\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.loginInFly$ = this.store.select(fromAuth.getLoginInFly);\n    localStorage.clear();\n  }\n\n  login(): void {\n    if (this.form.valid) {\n      this.store.dispatch(new fromAuth.Login(this.form.value));\n    }\n  }\n\n}\n\ntype Login = {\n  username: string;\n  password: string;\n};\n","<mat-toolbar>\n  <span>\n    Авторизация\n  </span>\n</mat-toolbar>\n<form [formGroup]=\"form\" (ngSubmit)=\"login()\">\n\n  <mat-form-field>\n    <mat-label>Логин</mat-label>\n    <input type=\"text\" matInput id=\"username\" name=\"username\" required autocomplete=\"off\" autofocus [formControl]=\"formModel.username\">\n    <mat-error *ngIf=\"formModel.username?.errors?.required\">Имя пользователя обязательно для заполнения</mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Пароль</mat-label>\n    <input type=\"password\" matInput id=\"password\" name=\"password\" required autocomplete=\"off\" [formControl]=\"formModel.password\">\n    <mat-error *ngIf=\"formModel.password?.errors?.required\">Пароль пользователя обязателен для заполнения</mat-error>\n  </mat-form-field>\n\n  <button\n    mat-raised-button\n    color=\"primary\"\n    [disabled]=\"loginInFly$ | async\">\n    Войти\n  </button>\n\n</form>\n","export * from './auth.actions';\nexport * from './auth.reducer';\nexport * from './auth.state';\nexport * from './auth.selectors';\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { StoreModule } from '@ngrx/store';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { EffectsModule } from '@ngrx/effects';\nimport { MaterialModule } from './shared/modules/material/material.module';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { environment } from 'src/environments/environment';\n\nimport { TaskEffects } from './state/task/task.effects';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { MainComponent } from './components/main/main.component';\nimport { AppComponent } from './app.component';\nimport { TaskListComponent } from './components/task-list/task-list.component';\nimport { NewTaskComponent } from './components/new-task/new-task.component';\nimport { TaskComponent } from './components/task/task.component';\n\nimport { TaskModule } from './modules/task/task.module';\nimport {metaReducers, reducers} from './reducers';\nimport {AuthModule} from './modules/auth/auth.module';\nimport {AuthEffects} from './state/auth/auth.effects';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    MainComponent,\n    TaskListComponent,\n    NewTaskComponent,\n    TaskComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    StoreModule.forRoot(reducers, {\n      runtimeChecks: {\n        strictStateImmutability: true,\n        strictActionImmutability: true\n      },\n      metaReducers\n    }),\n    !environment.production ? StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      logOnly: environment.production, // Restrict extension to log-only mode\n      autoPause: true, // Pauses recording actions and state changes when the extension window is not open\n    }) : [],\n    EffectsModule.forRoot([\n      AuthEffects,\n      TaskEffects,\n    ]),\n    AppRoutingModule,\n    AuthModule,\n    TaskModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\nimport { environment } from 'src/environments/environment';\nimport { Operation, OperationStatus } from 'src/app/shared/constants';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\nimport { SnackBarService } from '../shared/services/snack-bar.service';\nimport { EditTaskPayload, NewTaskPayload, Task, TaskData } from '../models/task.model';\nimport { Observable } from 'rxjs';\nimport { ConfigService } from './config.service';\nimport config from '../config';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n\n  private currentTask: Task | null = null;\n\n  private readonly taskApi: string = `${environment.baseUrl}`;\n\n  constructor(\n    private http: HttpClient,\n    private snackBar: SnackBarService,\n    private configService: ConfigService,\n    private router: Router,\n  ) { }\n\n  public getAll(options?: GetAllTasksOptions): Observable<GetAllTasksSuccess | GetAllTasksError> {\n\n    let params: HttpParams | null;\n\n    if (options) {\n\n      params = new HttpParams()\n        .set('developer', config.developer)\n        .set('sort_field', options?.sortField ?? '')\n        .set('sort_direction', options?.sortDirection ?? 'asc')\n        .set('page', options?.page ?? '1');\n\n    } else {\n      params = this.configService.getConfig().params;\n    }\n\n    return this.http.get<GetAllTasksSuccess | GetAllTasksError>(`${this.taskApi}/`, { params });\n  }\n\n  public create(data: NewTaskPayload): Observable<CreateTaskSuccessPayload | CreateTaskErrorPayload> {\n    const formData = new FormData();\n    formData.set('username', data.username);\n    formData.set('email', data.email);\n    formData.set('text', data.text);\n    return this.http.post<Operation>(`${this.taskApi}/create`, formData, this.configService.getConfig())\n      .pipe(\n        map(payload => {\n          switch (payload.status) {\n            case OperationStatus.Error:\n              this.showErrorMessage('Не удалось создать задачу');\n              return payload as CreateTaskErrorPayload;\n            case OperationStatus.Ok:\n              this.showMessage('Задача создана');\n              return payload as CreateTaskSuccessPayload;\n          }\n        })\n      );\n  }\n\n  public edit(data: EditTaskPayload): Observable<EditTaskSuccessPayload | EditTaskErrorPayload> {\n    const formData = new FormData();\n    formData.set('text', data.data.text);\n    formData.set('status', data.data.status.toString());\n    formData.set('token', data.token);\n\n    const params = new HttpParams()\n      .set('developer', config.developer)\n      .set('token', data.token);\n\n    return this.http.post<EditTaskSuccessPayload | EditTaskErrorPayload>(`${this.taskApi}/edit/${data.id}`, formData, { params })\n      .pipe(\n        map(payload => {\n          switch (payload.status) {\n            case OperationStatus.Error:\n              if (payload?.message?.token) {\n                this.router.navigate(['login']);\n              }\n              this.showErrorMessage('Не удалось сохранить изменения');\n              return payload;\n            case OperationStatus.Ok:\n              this.showMessage('Изменения сохранены')\n              return payload;\n          }\n        })\n      );\n  }\n\n  public getCurrentTask(): Task | null {\n    return this.currentTask;\n  }\n\n  private showMessage(message: string): void {\n    this.snackBar.showMessage(message);\n  }\n\n  private showErrorMessage(message: string): void {\n    this.snackBar.showErrorMessage(message);\n  }\n\n}\n\nexport type GetAllTasksResponse = {\n  totalCount: number,\n  nodes: Task[],\n};\n\nexport type GetAllTasksError = {\n  status: OperationStatus.Error;\n  message: string;\n};\n\nexport type GetAllTasksSuccess = {\n  status: OperationStatus.Ok;\n  message: {\n    tasks: TaskData[];\n    total_task_count: number;\n  }\n};\n\nexport type CreateTaskSuccessPayload = {\n  status: OperationStatus.Ok;\n  message: TaskData;\n};\n\nexport type CreateTaskErrorPayload = {\n  status: OperationStatus.Error;\n  message: {\n    username?: string;\n    email?: string;\n    text?: string;\n    status?: string;\n  }\n};\n\nexport type EditTaskSuccessPayload = {\n  status: OperationStatus.Ok;\n  message: TaskData;\n};\n\nexport type EditTaskErrorPayload = {\n  status: OperationStatus.Error;\n  message: {\n    text?: string;\n    status?: string;\n    token?: string;\n  }\n};\n\nexport type sortField = 'id' | 'username' | 'email' | 'status';\n\nexport type sortDirection = 'asc' | 'desc';\n\nexport type GetAllTasksOptions = {\n  sortField?: sortField;\n  sortDirection?: sortDirection;\n  page?: string;\n};\n","export * from './task.actions';\nexport * from './task.reducer';\nexport * from './task.state';\nexport * from './task.selectors';\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { NewTaskPayload } from 'src/app/models/task.model';\n\nimport * as fromTask from '../../state/task';\n\n@Component({\n  selector: 'app-new-task',\n  templateUrl: './new-task.component.html',\n  styleUrls: ['./new-task.component.scss']\n})\nexport class NewTaskComponent implements OnInit, OnDestroy {\n  create$: Subscription | null = null;\n  formModel: { [key in keyof NewTaskPayload]: FormControl } = {\n    username: new FormControl(null, [\n      Validators.required\n    ]),\n    email: new FormControl(null, [\n      Validators.required,\n      Validators.email,\n    ]),\n    text: new FormControl(null, [\n      Validators.required,\n    ]),\n  };\n\n  form: FormGroup = new FormGroup(this.formModel);\n\n  operationInFly$: Observable<boolean | null> | null = null;\n\n  constructor(\n    private readonly router: Router,\n    private readonly store: Store,\n  ) { }\n\n  ngOnInit(): void {\n    this.operationInFly$ = this.store.select(fromTask.createTaskOperationInFly);\n    this.create$ = this.store.select(fromTask.createTaskOperationPayload)\n      .pipe(tap(async payload => {\n        if (payload) {\n          this.store.dispatch(new fromTask.CreateTaskOperation(false));\n          await this.router.navigate(['../']);\n        }\n      }))\n      .subscribe();\n  }\n\n  create(): void {\n    if (this.form.valid) {\n      this.store.dispatch(new fromTask.CreateTask(this.form.value));\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.create$) {\n      this.create$.unsubscribe();\n    }\n  }\n\n}\n","<mat-toolbar>\n  <a mat-button routerLink=\"../\">Назад</a>\n  <span>\n    Новая задача\n  </span>\n</mat-toolbar>\n<form [formGroup]=\"form\" (ngSubmit)=\"create()\">\n\n  <mat-form-field>\n    <mat-label>Пользователь</mat-label>\n    <input type=\"text\" matInput id=\"username\" name=\"username\" required autocomplete=\"off\" autofocus [formControl]=\"formModel.username\">\n    <mat-error *ngIf=\"formModel.username?.errors?.required\">Имя пользователя обязательно для заполнения</mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Email</mat-label>\n    <input type=\"text\" matInput id=\"email\" name=\"email\" required autocomplete=\"off\" [formControl]=\"formModel.email\">\n    <mat-error *ngIf=\"formModel.email?.errors?.required\">Email обязателен для заполнения</mat-error>\n    <mat-error *ngIf=\"formModel.email?.errors?.email\">Некорректный email</mat-error>\n  </mat-form-field>\n\n  <mat-form-field>\n    <mat-label>Текст</mat-label>\n    <textarea type=\"text\" matInput id=\"text\" name=\"text\" required [formControl]=\"formModel.text\"></textarea>\n    <mat-error *ngIf=\"formModel.text?.errors?.required\">Текст задачи обязателен для заполнения</mat-error>\n  </mat-form-field>\n\n  <button\n    type=\"submit\"\n    mat-raised-button\n    color=\"primary\"\n    [disabled]=\"operationInFly$ | async\">\n    Создать\n  </button>\n\n</form>\n","import {Injectable} from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {AuthService} from '../../services/auth.service';\n\nimport * as fromAuth from '../auth';\nimport {catchError, map, mergeMap} from 'rxjs/operators';\nimport {OperationStatus} from '../../shared/constants';\nimport {SnackBarService} from '../../shared/services/snack-bar.service';\nimport {of} from 'rxjs';\n\n@Injectable()\nexport class AuthEffects {\n  login$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromAuth.AuthActionTypes.Login),\n      map((action: fromAuth.Login) => action.payload),\n      mergeMap(data => this.authService.login(data)\n        .pipe(\n          map(payload => {\n            switch (payload.status) {\n              case OperationStatus.Error:\n                if (payload.message?.username) {\n                  this.snackBar.showErrorMessage(payload.message.username);\n                }\n                if (payload.message?.password) {\n                  this.snackBar.showErrorMessage(payload.message.password);\n                }\n                if (payload.message?.token) {\n                  this.snackBar.showErrorMessage(payload.message.token);\n                }\n                return (new fromAuth.LoginError(payload));\n              case OperationStatus.Ok:\n                return (new fromAuth.LoginSuccess(payload));\n            }\n          }),\n          catchError((error) => of(new fromAuth.LoginError(error)))\n        )\n      ),\n    )\n  );\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private snackBar: SnackBarService,\n  ) {\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\nimport { OperationStatus } from 'src/app/shared/constants';\nimport { SnackBarService } from '../shared/services/snack-bar.service';\nimport { ConfigService } from './config.service';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\n\nimport * as fromAuth from '../state/auth';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private token: string | null = null;\n\n  private readonly taskApi: string = `${environment.baseUrl}`;\n\n  constructor(\n    private http: HttpClient,\n    private snackBar: SnackBarService,\n    private readonly configService: ConfigService,\n    private readonly router: Router,\n    private readonly store: Store,\n  ) {\n    this.getToken();\n  }\n\n  public login(data: { username: string; password: string; }): Observable<LoginOperation> {\n\n    const formData = new FormData();\n    formData.set('username', data.username);\n    formData.set('password', data.password);\n\n    return this.http.post<LoginOperation>(`${this.taskApi}/login`, formData, this.configService.getConfig())\n      .pipe(\n        map(response => {\n          switch (response.status) {\n            case OperationStatus.Error:\n              if (response.message?.username) {\n                this.showErrorMessage(response.message.username);\n              }\n              if (response.message?.password) {\n                this.showErrorMessage(response.message.password);\n              }\n              return response;\n            case OperationStatus.Ok:\n              if (response.message?.token) {\n                this.setToken(response.message.token);\n                this.store.dispatch(new fromAuth.IsAuthenticated({ isAuthenticated: true, token: response.message.token }));\n              }\n              this.router.navigate(['']);\n              return response;\n          }\n        })\n      );\n  }\n\n  public getToken(): string | null {\n    const token = localStorage.getItem('token');\n    if (token) {\n      this.token = token;\n      this.store.dispatch(new fromAuth.IsAuthenticated({ isAuthenticated: true, token }));\n      return this.token;\n    } else {\n      this.store.dispatch(new fromAuth.IsAuthenticated({ isAuthenticated: false, token: null }));\n      return null;\n    }\n  }\n\n  private setToken(token: string): void {\n    localStorage.setItem('token', token);\n    this.token = token;\n  }\n\n  public logout(): void {\n    this.store.dispatch(new fromAuth.IsAuthenticated({ isAuthenticated: false, token: null }));\n    localStorage.clear();\n    this.token = null;\n    this.router.navigate(['']);\n  }\n\n  private showErrorMessage(message: string): void {\n    this.snackBar.showErrorMessage(message);\n  }\n\n}\n\ntype LoginOperation = {\n  status: OperationStatus\n  message?: {\n    token: string;\n    username: string;\n    password: string;\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { Task } from 'src/app/models/task.model';\nimport { OperationStatus } from 'src/app/shared/constants';\nimport { SnackBarService } from 'src/app/shared/services/snack-bar.service';\nimport { TaskService } from '../../services/task.service';\n\nimport * as fromTask from '../task';\n\n@Injectable()\nexport class TaskEffects {\n\n  loadAllTasks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromTask.TaskActionTypes.GET_ALL_TASKS),\n      map((action: fromTask.GetAllTasks) => action?.payload),\n      mergeMap(data => this.taskService.getAll(data)\n        .pipe(\n          map(payload => {\n            switch (payload.status) {\n              case OperationStatus.Error:\n                this.snackBar.showErrorMessage(payload.message);\n                return (new fromTask.GetAllTasksError({ message: payload.message }));\n\n              case OperationStatus.Ok:\n                return (new fromTask.GetAllTasksSuccess({\n                  totalCount: payload.message.total_task_count,\n                  nodes: payload.message.tasks.map(task => new Task(task)),\n                }));\n            }\n          }),\n          catchError((error) => of(new fromTask.GetAllTasksError({ message: error.message })))\n        )\n      )\n    )\n  );\n\n  createTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromTask.TaskActionTypes.CREATE_TASK),\n      map((action: fromTask.CreateTask) => action.payload),\n      mergeMap(data => this.taskService.create(data)\n        .pipe(\n          map(payload => {\n            switch (payload.status) {\n              case OperationStatus.Ok:\n                return (new fromTask.CreateTaskSuccess(payload));\n              case OperationStatus.Error:\n                return (new fromTask.CreateTaskError(payload));\n            }\n          }),\n          catchError(() => of({ type: '[Task API] Create Task Error' })),\n        ))\n    )\n  );\n\n  editTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromTask.TaskActionTypes.EDIT_TASK),\n      map((action: fromTask.EditTask) => action.payload),\n      mergeMap(data => this.taskService.edit(data)\n        .pipe(\n          map(payload => {\n            switch (payload.status) {\n              case OperationStatus.Ok:\n                return (new fromTask.EditTaskSuccess(payload));\n              case OperationStatus.Error:\n                return (new fromTask.EditTaskError(payload));\n            }\n          }),\n          catchError(() => of({ type: '[Task API] Edit Task Error' })),\n        ))\n    )\n  );\n\n  constructor(\n    private actions$: Actions,\n    private taskService: TaskService,\n    private readonly snackBar: SnackBarService,\n  ) { }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { HttpParams } from '@angular/common/http';\nimport config from '../config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n\n  constructor() { }\n\n  public getConfig(): { params: HttpParams } {\n    const params = new HttpParams()\n      .set('developer', config.developer);\n    return {\n      params,\n    };\n  }\n}\n","export type TaskData = {\n  id: string\n  username: string\n  email: string\n  text: string\n  status: number\n};\n\nexport class Task {\n\n  public readonly id: string;\n  public readonly username: string;\n  public readonly email: string;\n  public readonly text: string;\n  public readonly status: TaskStatus;\n  public readonly completed: boolean = false;\n  public readonly edited: boolean = false;\n\n  constructor(data: TaskData) {\n    this.id = data.id;\n    this.username = data.username;\n    this.email = data.email;\n    this.text = data.text;\n    this.status = data.status;\n\n    switch (data.status) {\n      case TaskStatus.NotCompleted:\n        this.completed = false;\n        this.edited = false;\n        break;\n      case TaskStatus.NotCompletedAndEditedByAdmin:\n        this.completed = false;\n        this.edited = true;\n        break;\n      case TaskStatus.Completed:\n        this.completed = true;\n        this.edited = false;\n        break;\n      case TaskStatus.CompletedAndEditedByAdmin:\n        this.completed = true;\n        this.edited = true;\n        break;\n\n      default:\n        break;\n    }\n\n  }\n\n}\n\nexport type NewTaskPayload = {\n  username: string;\n  email: string;\n  text: string;\n};\n\nexport type EditTaskPayload = {\n  id: string;\n  data: {\n    text: string;\n    status: TaskStatus;\n  };\n  token: string;\n};\n\nexport enum TaskStatus {\n  NotCompleted = 0,\n  NotCompletedAndEditedByAdmin = 1,\n  Completed = 10,\n  CompletedAndEditedByAdmin = 11\n}\n","import { taskInitialState, TaskState } from './task.state';\nimport { TaskActions, TaskActionTypes } from './task.actions';\n\nexport function taskReducer(state: TaskState = taskInitialState, action: TaskActions): TaskState {\n  switch (action.type) {\n    case TaskActionTypes.GET_ALL_TASKS:\n      return Object.assign({}, state, {\n        isLoading: true\n      });\n\n    case TaskActionTypes.GET_ALL_TASKS_SUCCESS:\n      return Object.assign({}, state, {\n        isLoading: false,\n        tasks: action.payload,\n      });\n\n    case TaskActionTypes.GET_ALL_TASKS_ERROR:\n      return Object.assign({}, state, {\n        isLoading: false,\n        error: action.payload.message,\n      });\n\n    case TaskActionTypes.CREATE_TASK:\n      return Object.assign({}, state, {\n        createTask: {\n          operationInFly: true,\n        }\n      });\n\n    case TaskActionTypes.CREATE_TASK_SUCCESS:\n      return Object.assign({}, state, {\n        createTask: {\n          operationInFly: false,\n          payload: action.payload,\n        }\n      });\n\n    case TaskActionTypes.CREATE_TASK_ERROR:\n      return Object.assign({}, state, {\n        createTask: {\n          operationInFly: false,\n          payload: action.payload,\n        }\n      });\n\n    case TaskActionTypes.CREATE_TASK_OPERATION:\n      return Object.assign({}, state, {\n        createTask: {\n          payload: action.payload,\n        }\n      });\n\n    case TaskActionTypes.SET_CURRENT_TASK:\n      return Object.assign({}, state, {\n        currentTask: action.payload\n      });\n\n    case TaskActionTypes.EDIT_TASK:\n      return Object.assign({}, state, {\n        editTask: {\n          operationInFly: true,\n        }\n      });\n\n    case TaskActionTypes.EDIT_TASK_SUCCESS:\n      return Object.assign({}, state, {\n        editTask: {\n          operationInFly: false,\n          payload: action.payload,\n        }\n      });\n\n    case TaskActionTypes.EDIT_TASK_ERROR:\n      return Object.assign({}, state, {\n        editTask: {\n          operationInFly: false,\n          payload: action.payload,\n        }\n      });\n\n    case TaskActionTypes.EDIT_TASK_OPERATION:\n      return Object.assign({}, state, {\n        editTask: {\n          payload: action.payload,\n        }\n      });\n\n    default:\n      return state;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { MainComponent } from './components/main/main.component';\nimport { NewTaskComponent } from './components/new-task/new-task.component';\n\nimport { TaskListComponent } from './components/task-list/task-list.component';\nimport { TaskComponent } from './components/task/task.component';\nimport { AuthGuard } from './guards/auth.guard';\n\nconst routes: Routes = [\n  {\n    path: 'login', component: LoginComponent,\n  },\n  {\n    path: '', component: MainComponent, children: [\n      {\n        path: 'task-list', children: [\n          {\n            path: '', component: TaskListComponent,\n          },\n          {\n            path: 'new', component: NewTaskComponent,\n          },\n          {\n            path: ':taskId', canActivate: [AuthGuard], component: TaskComponent,\n          },\n        ],\n      },\n      {\n        path: '', pathMatch: 'full', redirectTo: 'task-list',\n      }\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\nimport { Observable } from 'rxjs';\n\nimport { Sort } from '@angular/material/sort';\nimport { PageEvent } from '@angular/material/paginator';\n\nimport { Task } from 'src/app/models/task.model';\nimport { Store } from '@ngrx/store';\n\nimport * as fromTask from '../../state/task';\n\nimport {\n  GetAllTasksOptions,\n  GetAllTasksResponse,\n  sortDirection,\n  sortField,\n} from 'src/app/services/task.service';\nimport { TaskDatasource } from 'src/app/services/task.datasource';\n\n@Component({\n  selector: 'app-task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.scss']\n})\nexport class TaskListComponent implements OnInit {\n\n  displayedColumns = [\n    'username',\n    'email',\n    'text',\n    'completed',\n    'edited',\n  ];\n\n  taskList$: Observable<GetAllTasksResponse> | null = null;\n\n  dataSource: TaskDatasource | null = null;\n\n  constructor(\n    private store: Store,\n  ) { }\n\n  ngOnInit(): void {\n\n    this.dataSource = new TaskDatasource(this.store);\n\n    this.taskList$ = this.store.select(fromTask.getTasks);\n\n    this.fetchTaskList();\n\n  }\n\n  onSortChange(event: Sort): void {\n    this.fetchTaskList({\n      sortField: event.active as sortField,\n      sortDirection: event.direction as sortDirection,\n    });\n  }\n\n  onPageEvent(pageEvent: PageEvent): void {\n    this.fetchTaskList({\n      page: (pageEvent.pageIndex + 1).toString()\n    });\n  }\n\n  onSelectTask(task: Task): void {\n    this.store.dispatch(new fromTask.SetCurrentTask(task));\n  }\n\n  private fetchTaskList(options: GetAllTasksOptions = {\n    sortField: 'id',\n    sortDirection: 'desc',\n  }): void {\n    this.store.dispatch(new fromTask.GetAllTasks(options));\n  }\n\n}\n","<ng-container *ngIf=\"taskList$ | async as taskList\">\n  <mat-toolbar>\n    <div class=\"spacer\"></div>\n    <button mat-button color=\"primary\" routerLink=\"new\">Новая задача</button>\n  </mat-toolbar>\n\n  <div class=\"spinner-container\" *ngIf=\"dataSource?.loading$ | async\">\n    <mat-spinner></mat-spinner>\n  </div>\n\n  <table\n    *ngIf=\"dataSource\"\n    mat-table\n    [dataSource]=\"dataSource\"\n    matSort\n    (matSortChange)=\"onSortChange($event)\"\n  >\n    <ng-container matColumnDef=\"username\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Пользователь</th>\n      <td class=\"username\" mat-cell *matCellDef=\"let element\">\n        {{ element.username }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"email\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\n      <td class=\"email\" mat-cell *matCellDef=\"let element\">\n        {{ element.email }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"text\">\n      <th mat-header-cell *matHeaderCellDef>Текст</th>\n      <td class=\"text\" mat-cell *matCellDef=\"let element\">\n        {{ element.text }}\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"completed\">\n      <th class=\"completed\" mat-header-cell *matHeaderCellDef>Выполнена</th>\n      <td class=\"completed\" mat-cell *matCellDef=\"let element\">\n        <mat-checkbox [checked]=\"element.completed\" disabled></mat-checkbox>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"edited\">\n      <th class=\"edited\" mat-header-cell *matHeaderCellDef>Отредактирована</th>\n      <td class=\"edited\" mat-cell *matCellDef=\"let element\">\n        <mat-checkbox [checked]=\"element.edited\" disabled></mat-checkbox>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr\n      mat-row\n      [routerLink]=\"row.id\"\n      (click)=\"onSelectTask(row)\"\n      *matRowDef=\"let row; columns: displayedColumns\"\n    ></tr>\n  </table>\n\n  <mat-paginator\n    [hidePageSize]=\"true\"\n    [length]=\"taskList.totalCount\"\n    [pageSize]=\"3\"\n    [pageSizeOptions]=\"[2, 4, 6, 10, 20]\"\n    (page)=\"onPageEvent($event)\"\n  ></mat-paginator>\n</ng-container>\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}